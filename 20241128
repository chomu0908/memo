selectedDateを常にyyyymmdd形式で管理:

DatePickerで選択された日付をDate型からyyyymmdd形式に変換して管理します。
writeValueやonDateChange内で変換処理を行います。
フォームにはyyyymmdd形式で値を渡す:

フォームと連携する際に、onChangeでyyyymmdd形式の値を送信します。
inputフィールドにyyyymmdd形式を表示:

matInputを持つinput要素に変換後の値を直接表示します。
修正版のカスタムコンポーネント
typescript
コードをコピーする
import { Component, forwardRef, Host, Optional, SkipSelf } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';

@Component({
  selector: 'app-custom-date-picker',
  templateUrl: './custom-date-picker.component.html',
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => CustomDatePickerComponent),
      multi: true,
    },
  ],
})
export class CustomDatePickerComponent implements ControlValueAccessor {
  selectedDate: string | null = null; // 常に yyyymmdd 形式で管理
  isCheckboxChecked: boolean = false;

  constructor(@Optional() @Host() @SkipSelf() public controlDir: NgControl) {
    if (this.controlDir) {
      this.controlDir.valueAccessor = this;
    }
  }

  writeValue(value: string | null): void {
    // 初期値の設定（フォームから受け取る値は常に yyyymmdd）
    this.selectedDate = value;
    this.isCheckboxChecked = value === '99999999';
  }

  registerOnChange(fn: (value: string | null) => void): void {
    this.onChange = fn;
  }

  registerOnTouched(fn: () => void): void {
    this.onTouched = fn;
  }

  setDisabledState?(isDisabled: boolean): void {
    this.disabled = isDisabled;
  }

  onDateChange(event: any): void {
    if (!this.isCheckboxChecked) {
      const date = new Date(event);
      this.selectedDate = this.formatDate(date); // yyyymmdd形式に変換
      this.onChange(this.selectedDate); // フォームに通知
    }
  }

  onCheckboxChange(): void {
    this.isCheckboxChecked = !this.isCheckboxChecked;
    if (this.isCheckboxChecked) {
      this.selectedDate = '99999999'; // チェック時は固定値
    } else {
      this.selectedDate = null; // チェック解除時はリセット
    }
    this.onChange(this.selectedDate); // フォームに通知
  }

  private formatDate(date: Date): string {
    const year = date.getFullYear();
    const month = ('0' + (date.getMonth() + 1)).slice(-2);
    const day = ('0' + date.getDate()).slice(-2);
    return `${year}${month}${day}`;
  }

  get isInvalid(): boolean {
    return this.controlDir?.invalid && this.controlDir?.touched;
  }

  get errorMessages(): string[] {
    if (!this.controlDir || !this.controlDir.errors) return [];
    const errors = this.controlDir.errors;
    const messages: string[] = [];
    if (errors['required']) messages.push('日付は必須です。');
    if (errors['invalidDate']) messages.push('日付の形式が正しくありません。');
    return messages;
  }

  private onChange: (value: string | null) => void = () => {};
  private onTouched: () => void = () => {};
  disabled: boolean = false;
}
テンプレートの修正
カスタムコンポーネントのテンプレートでは、inputフィールドに常にselectedDate（yyyymmdd形式）を表示します。

html
コードをコピーする
<div>
  <mat-checkbox [(ngModel)]="isCheckboxChecked" (change)="onCheckboxChange()">
    特殊日付 (99999999)
  </mat-checkbox>
</div>

<mat-form-field appearance="fill">
  <mat-label>日付を選択</mat-label>
  <input
    matInput
    [value]="selectedDate"
    [matDatepicker]="picker"
    [disabled]="isCheckboxChecked"
    (dateChange)="onDateChange($event.value)"
  />
  <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
  <mat-datepicker #picker></mat-datepicker>

  <mat-error *ngIf="isInvalid">
    <ng-container *ngFor="let message of errorMessages">
      {{ message }}
    </ng-container>
  </mat-error>
</mat-form-field>
フォームの設定
フォームには、カスタムコンポーネントからyyyymmdd形式で値が送信されます。

メインフォームコンポーネント
typescript
コードをコピーする
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-main-form',
  templateUrl: './main-form.component.html',
})
export class MainFormComponent {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      customDate: [null, [Validators.required, this.customDateValidator]],
    });
  }

  submit(): void {
    if (this.form.valid) {
      console.log('送信データ:', this.form.value);
    } else {
      console.log('フォームが無効です:', this.form.errors);
    }
  }

  // カスタムバリデーター例
  customDateValidator(control: any) {
    const value = control.value;
    if (value === '99999999' || /^\d{8}$/.test(value)) {
      return null; // OK
    }
    return { invalidDate: true };
  }
}
メインフォームテンプレート
html
コードをコピーする
<form [formGroup]="form" (ngSubmit)="submit()">
  <app-custom-date-picker
    label="日付を選択"
    formControlName="customDate"
  ></app-custom-date-picker>
  <button mat-raised-button color="primary" type="submit">送信</button>
</form>
動作の説明
selectedDateを常にyyyymmdd形式で表示:

inputフィールドに変換済みの日付または99999999を直接表示します。
フォームに値を送信:

ControlValueAccessorを使って、フォームにはyyyymmdd形式で値を通知します。
エラーメッセージの対応:

フォームのエラー状態を監視し、エラーがある場合に適切なメッセージを表示します。
これで、yyyymmdd形式を正しく表示しながら、フォームとの連携とエラーメッセージ表示も実現できます！












ChatGPT の回答は必ずしも正しいとは限りません。重要な
