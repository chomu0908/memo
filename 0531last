名前以外にセレクトボックスの欄を設ける場合、フォームに新しいフィールドを追加し、それに基づいた変更をテンプレートやサービスに反映させる必要があります。ここでは、セレクトボックスに「役割」を追加する例を示します。

1. データサービスの更新 (data.service.ts)
Userインターフェースにroleフィールドを追加します。

typescript
コードをコピーする
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

export interface User {
  name: string;
  role: string;
}

@Injectable({
  providedIn: 'root'
})
export class DataService {
  private usersSource = new BehaviorSubject<User[]>([
    { name: '太郎', role: '管理者' },
    { name: '次郎', role: 'ユーザー' },
    { name: '三郎', role: 'ゲスト' },
  ]);

  users$ = this.usersSource.asObservable();

  private getUsers(): User[] {
    return this.usersSource.getValue();
  }

  updateUser(index: number, updatedUser: User): void {
    const users = this.getUsers();
    users[index] = updatedUser;
    this.usersSource.next(users);
  }

  addUser(newUser: User): void {
    const users = this.getUsers();
    users.push(newUser);
    this.usersSource.next(users);
  }

  deleteUser(index: number): void {
    const users = this.getUsers();
    users.splice(index, 1);
    this.usersSource.next(users);
  }
}
2. コンポーネントの更新 (app.component.ts)
変更はありません。

3. テンプレートの更新 (app.component.html)
役割列を追加します。

html
コードをコピーする
<div>
  <h1>ユーザーリスト</h1>
  <button mat-button (click)="openAddDialog()">ユーザーを追加</button>
  <table mat-table [dataSource]="dataSource$ | async" class="mat-elevation-z8">

    <!-- 名前列 -->
    <ng-container matColumnDef="name">
      <th mat-header-cell *matHeaderCellDef>名前</th>
      <td mat-cell *matCellDef="let element">{{element.name}}</td>
    </ng-container>

    <!-- 役割列 -->
    <ng-container matColumnDef="role">
      <th mat-header-cell *matHeaderCellDef>役割</th>
      <td mat-cell *matCellDef="let element">{{element.role}}</td>
    </ng-container>

    <!-- アクション列 -->
    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef>アクション</th>
      <td mat-cell *matCellDef="let element; let i = index">
        <button mat-button (click)="openDialog(i, element)">編集</button>
        <button mat-button (click)="deleteUser(i)">削除</button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>
</div>
4. ダイアログコンポーネントの更新 (name-dialog.component.ts)
フォームに新しいフィールドを追加します。

typescript
コードをコピーする
import { Component, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-name-dialog',
  templateUrl: './name-dialog.component.html',
})
export class NameDialogComponent {
  form: FormGroup;
  roles: string[] = ['管理者', 'ユーザー', 'ゲスト'];

  constructor(
    public dialogRef: MatDialogRef<NameDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: { name: string, role: string, isEdit: boolean },
    private fb: FormBuilder
  ) {
    this.form = this.fb.group({
      name: [data.name, Validators.required],
      role: [data.role, Validators.required]
    });
  }

  onNoClick(): void {
    this.dialogRef.close();
  }

  onSaveClick(): void {
    if (this.form.valid) {
      this.dialogRef.close(this.form.value);
    }
  }
}
5. ダイアログテンプレートの更新 (name-dialog.component.html)
セレクトボックスを追加します。

html
コードをコピーする
<h1 mat-dialog-title>ユーザー情報を入力してください</h1>
<div mat-dialog-content>
  <form [formGroup]="form">
    <mat-form-field>
      <mat-label>名前</mat-label>
      <input matInput formControlName="name">
    </mat-form-field>
    <mat-form-field>
      <mat-label>役割</mat-label>
      <mat-select formControlName="role">
        <mat-option *ngFor="let role of roles" [value]="role">{{ role }}</mat-option>
      </mat-select>
    </mat-form-field>
  </form>
</div>
<div mat-dialog-actions>
  <button mat-button (click)="onNoClick()">キャンセル</button>
  <button mat-button *ngIf="data.isEdit" (click)="onSaveClick()">編集完了</button>
  <button mat-button *ngIf="!data.isEdit" (click)="onSaveClick()">追加完了</button>
</div>
全体のファイル構成
data.service.ts
typescript
コードをコピーする
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

export interface User {
  name: string;
  role: string;
}

@Injectable({
  providedIn: 'root'
})
export class DataService {
  private usersSource = new BehaviorSubject<User[]>([
    { name: '太郎', role: '管理者' },
    { name: '次郎', role: 'ユーザー' },
    { name: '三郎', role: 'ゲスト' },
  ]);

  users$ = this.usersSource.asObservable();

  private getUsers(): User[] {
    return this.usersSource.getValue();
  }

  updateUser(index: number, updatedUser: User): void {
    const users = this.getUsers();
    users[index] = updatedUser;
    this.usersSource.next(users);
  }

  addUser(newUser: User): void {
    const users = this.getUsers();
    users.push(newUser);
    this.usersSource.next(users);
  }

  deleteUser(index: number): void {
    const users = this.getUsers();
    users.splice(index, 1);
    this.usersSource.next(users);
  }
}
app.component.ts
typescript
コードをコピーする
import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { NameDialogComponent } from './name-dialog/name-dialog.component';
import { DataService, User } from './data.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  displayedColumns: string[] = ['name', 'role', 'actions'];
  dataSource$: Observable<User[]>;

  constructor(public dialog: MatDialog, private dataService: DataService) {
    this.dataSource$ = this.dataService.users$;
  }

  ngOnInit(): void {}

  openDialog(index: number, user: User): void {
    const dialogRef = this.dialog.open(NameDialogComponent, {
      width: '250px',
      data: { name: user.name, role: user.role, isEdit: true }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.dataService.updateUser(index, { name: result.name, role: result.role });
      }
    });
  }

  openAddDialog(): void {
    const dialogRef = this.dialog.open(NameDialogComponent, {
      width: '250px',
      data: { name: '', role: '', isEdit: false }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        const newUser: User = { name: result.name, role: result.role };
        this.dataService.addUser(newUser);
      }
    });
  }

  deleteUser(index: number): void {
    this.dataService.deleteUser(index);
  }
}
app.component.html
html
コードをコピーする
<div>
  <h1>ユーザーリスト</h1>
  <button mat-button (click)="openAddDialog()">ユーザーを追加</button>
  <table mat-table [dataSource]="dataSource$ | async" class="mat-elevation-z8">

    <!-- 名前列 -->
    <ng-container matColumnDef="name">
      <th mat-header-cell *matHeaderCellDef>名前</th>
      <td mat-cell *matCellDef="let element">{{element.name}}</td>
    </ng-container>

    <!-- 役割列 -->
    <ng-container matColumnDef="role">
      <th mat-header-cell *matHeaderCellDef>役割</th>
      <td mat-cell *matCellDef="let element">{{element.role}}</td>
    </ng-container>

    <!-- アクション列 -->
    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef>アク




これだとセレクトボックスで選んだ内容がテーブルにはインデックス番号で表示されることになりませんか？
ChatGPT
セレクトボックスで選んだ内容がテーブルにインデックス番号ではなく、正しい役割名で表示されるようにするために、以下の点に注意して実装を行います。

1. データサービスの更新 (data.service.ts)
変更なし。

2. コンポーネントの更新 (app.component.ts)
変更なし。

3. テンプレートの更新 (app.component.html)
役割列を追加し、役割名を正しく表示するようにします。

html
コードをコピーする
<div>
  <h1>ユーザーリスト</h1>
  <button mat-button (click)="openAddDialog()">ユーザーを追加</button>
  <table mat-table [dataSource]="dataSource$ | async" class="mat-elevation-z8">

    <!-- 名前列 -->
    <ng-container matColumnDef="name">
      <th mat-header-cell *matHeaderCellDef>名前</th>
      <td mat-cell *matCellDef="let element">{{element.name}}</td>
    </ng-container>

    <!-- 役割列 -->
    <ng-container matColumnDef="role">
      <th mat-header-cell *matHeaderCellDef>役割</th>
      <td mat-cell *matCellDef="let element">{{element.role}}</td>
    </ng-container>

    <!-- アクション列 -->
    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef>アクション</th>
      <td mat-cell *matCellDef="let element; let i = index">
        <button mat-button (click)="openDialog(i, element)">編集</button>
        <button mat-button (click)="deleteUser(i)">削除</button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>
</div>
4. ダイアログコンポーネントの更新 (name-dialog.component.ts)
セレクトボックスを追加します。

typescript
コードをコピーする
import { Component, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-name-dialog',
  templateUrl: './name-dialog.component.html',
})
export class NameDialogComponent {
  form: FormGroup;
  roles: string[] = ['管理者', 'ユーザー', 'ゲスト'];

  constructor(
    public dialogRef: MatDialogRef<NameDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: { name: string, role: string, isEdit: boolean },
    private fb: FormBuilder
  ) {
    this.form = this.fb.group({
      name: [data.name, Validators.required],
      role: [data.role, Validators.required]
    });
  }

  onNoClick(): void {
    this.dialogRef.close();
  }

  onSaveClick(): void {
    if (this.form.valid) {
      this.dialogRef.close(this.form.value);
    }
  }
}
5. ダイアログテンプレートの更新 (name-dialog.component.html)
セレクトボックスの役割名を表示します。

html
コードをコピーする
<h1 mat-dialog-title>ユーザー情報を入力してください</h1>
<div mat-dialog-content>
  <form [formGroup]="form">
    <mat-form-field>
      <mat-label>名前</mat-label>
      <input matInput formControlName="name">
    </mat-form-field>
    <mat-form-field>
      <mat-label>役割</mat-label>
      <mat-select formControlName="role">
        <mat-option *ngFor="let role of roles" [value]="role">{{ role }}</mat-option>
      </mat-select>
    </mat-form-field>
  </form>
</div>
<div mat-dialog-actions>
  <button mat-button (click)="onNoClick()">キャンセル</button>
  <button mat-button *ngIf="data.isEdit" (click)="onSaveClick()">編集完了</button>
  <button mat-button *ngIf="!data.isEdit" (click)="onSaveClick()">追加完了</button>
</div>
まとめ
このように修正することで、セレクトボックスで選択した役割がそのままテーブルに表示されるようになります。役割名をセレクトボックスに設定し、フォームグループにバインドすることで、テーブルに表示される際には選択された役割名が表示されるようになります。
