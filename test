
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { AppState } from './app-state.interface';

@Injectable({
  providedIn: 'root'
})
export class MenuService {
  private initialState: AppState = {
    menu: '',
    header: ''
    // 他の初期値もここに追加
  };

  private stateSource = new BehaviorSubject<AppState>(this.initialState);
  state$ = this.stateSource.asObservable();

  constructor() {
    this.state$
      .pipe(
        tap(state => this.stateSource.next(state)), // 状態を更新
        map(state => this.getHeaderFromMenu(state.menu)) // ヘッダー文字列を取得
      )
      .subscribe(header => this.setState({ header }));
  }

  changeMenu(menu: string) {
    this.setState({ menu });
  }

  private setState(newState: Partial<AppState>) {
    const currentState = this.stateSource.value;
    this.stateSource.next({ ...currentState, ...newState });
  }

  private getHeaderFromMenu(menu: string): string {
    switch (menu) {
      case 'menu1':
        return 'Menu 1 - Home';
      case 'menu2':
        return 'Menu 2 - Settings';
      // 追加のケースはここに追加
      default:
        return 'Default Header';
    }
  }
}







なおし
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, tap, distinctUntilChanged } from 'rxjs/operators';
import { AppState } from './app-state.interface';

@Injectable({
  providedIn: 'root'
})
export class MenuService {
  private initialState: AppState = {
    menu: '',
    header: '',
    subMenu: '',
    userName: 'Guest'
  };

  private stateSource = new BehaviorSubject<AppState>(this.initialState);
  state$ = this.stateSource.asObservable();

  constructor() {
    this.state$
      .pipe(
        map(state => this.getHeaderFromMenu(state.menu)),
        distinctUntilChanged(),
        tap(header => this.setState({ header }))
      )
      .subscribe();

    this.state$
      .pipe(
        map(state => this.getSubMenuFromMenu(state.menu)),
        distinctUntilChanged(),
        tap(subMenu => this.setState({ subMenu }))
      )
      .subscribe();
  }

  changeMenu(menu: string) {
    this.setState({ menu });
  }

  changeUserName(userName: string) {
    this.setState({ userName });
  }

  private setState(newState: Partial<AppState>) {
    const currentState = this.stateSource.value;
    this.stateSource.next({ ...currentState, ...newState });
  }

  private getHeaderFromMenu(menu: string): string {
    switch (menu) {
      case 'menu1':
        return 'Menu 1 - Home';
      case 'menu2':
        return 'Menu 2 - Settings';
      default:
        return 'Default Header';
    }
  }

  private getSubMenuFromMenu(menu: string): string {
    switch (menu) {
      case 'menu1':
        return 'Sub Menu 1';
      case 'menu2':
        return 'Sub Menu 2';
      default:
        return '';
    }
  }
}







受け取り側
import { Component, OnInit } from '@angular/core';
import { MenuService } from './menu.service';
import { Observable } from 'rxjs';
import { AppState } from './app-state.interface';

@Component({
  selector: 'app-header',
  template: `
    <h1>{{ state$ | async | json }}</h1>
  `
})
export class HeaderComponent implements OnInit {
  state$: Observable<AppState>;

  constructor(private menuService: MenuService) {}

  ngOnInit() {
    this.state$ = this.menuService.state$;
  }
}

html
<h1>{{ (state$ | async)?.header }}</h1>


import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { MenuService } from './menu.service';
import { AppState } from './app-state.interface';

@Component({
  selector: 'app-header',
  template: `
    <h1>{{ header$ | async }}</h1>
    <p>Current Menu: {{ menu$ | async }}</p>
  `
})
export class HeaderComponent implements OnInit {
  header$: Observable<string>;
  menu$: Observable<string>;

  constructor(private menuService: MenuService) {}

  ngOnInit() {
    this.header$ = this.menuService.state$.pipe(
      map(state => state.header)
    );
    this.menu$ = this.menuService.state$.pipe(
      map(state => state.menu)
    );
  }
}











import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, tap, distinctUntilChanged } from 'rxjs/operators';
import { AppState } from './app-state.interface';

@Injectable({
  providedIn: 'root'
})
export class MenuService {
  private initialState: AppState = {
    menu: '',
    header: '',
    subMenu: '',
    userName: 'Guest'
  };

  private stateSource = new BehaviorSubject<AppState>(this.initialState);
  state$ = this.stateSource.asObservable();

  constructor() {
    this.state$
      .pipe(
        map(state => this.getHeaderFromMenu(state.menu)),
        distinctUntilChanged(),
        tap(header => this.setState({ header }))
      )
      .subscribe();

    this.state$
      .pipe(
        map(state => this.getSubMenuFromMenu(state.menu)),
        distinctUntilChanged(),
        tap(subMenu => this.setState({ subMenu }))
      )
      .subscribe();
  }

  changeMenu(menu: string) {
    this.setState({ menu });
  }

  changeUserName(userName: string) {
    this.setState({ userName });
  }

  private setState(newState: Partial<AppState>) {
    const currentState = this.stateSource.value;
    this.stateSource.next({ ...currentState, ...newState });
  }

  private getHeaderFromMenu(menu: string): string {
    switch (menu) {
      case 'menu1':
        return 'Menu 1 - Home';
      case 'menu2':
        return 'Menu 2 - Settings';
      default:
        return 'Default Header';
    }
  }

  private getSubMenuFromMenu(menu: string): string {
    switch (menu) {
      case 'menu1':
        return 'Sub Menu 1';
      case 'menu2':
        return 'Sub Menu 2';
      default:
        return '';
    }
  }
}

import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { MenuService } from './menu.service';
import { AppState } from './app-state.interface';

@Component({
  selector: 'app-header',
  template: `
    <h1>{{ header$ | async }}</h1>
    <p>Current Menu: {{ menu$ | async }}</p>
    <p>Sub Menu: {{ subMenu$ | async }}</p>
    <p>User Name: {{ userName$ | async }}</p>
  `
})
export class HeaderComponent implements OnInit {
  header$: Observable<string>;
  menu$: Observable<string>;
  subMenu$: Observable<string>;
  userName$: Observable<string>;

  constructor(private menuService: MenuService) {}

  ngOnInit() {
    this.header$ = this.menuService.state$.pipe(
      map(state => state.header)
    );
    this.menu$ = this.menuService.state$.pipe(
      map(state => state.menu)
    );
    this.subMenu$ = this.menuService.state$.pipe(
      map(state => state.subMenu)
    );
    this.userName$ = this.menuService.state$.pipe(
      map(state => state.userName)
    );
  }
}





import { Component } from '@angular/core';
import { MenuService } from './menu.service';

@Component({
  selector: 'app-menu',
  template: `
    <button (click)="changeMenu('menu1')">Menu 1</button>
    <button (click)="changeMenu('menu2')">Menu 2</button>
    <button (click)="changeUserName('John Doe')">Change User Name</button>
  `
})
export class MenuComponent {
  constructor(private menuService: MenuService) {}

  changeMenu(menu: string) {
    this.menuService.changeMenu(menu);
  }

  changeUserName(userName: string) {
    this.menuService.changeUserName(userName);
  }
}









import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, tap, distinctUntilChanged } from 'rxjs/operators';
import { AppState } from './app-state.interface';

@Injectable({
  providedIn: 'root'
})
export class MenuService {
  private initialState: AppState = {
    menu: '',
    header: '',
    subMenu: '',
    userName: 'Guest'
  };

  private stateSource = new BehaviorSubject<AppState>(this.initialState);
  state$ = this.stateSource.asObservable();

  constructor() {
    this.state$
      .pipe(
        map(state => this.getHeaderFromMenu(state.menu)),
        distinctUntilChanged(),
        tap(header => this.setState({ header })) // 修正: ラムダ式を使用
      )
      .subscribe();

    this.state$
      .pipe(
        map(state => this.getSubMenuFromMenu(state.menu)),
        distinctUntilChanged(),
        tap(subMenu => this.setState({ subMenu })) // 修正: ラムダ式を使用
      )
      .subscribe();
  }

  changeMenu(menu: string) {
    this.setState({ menu });
  }

  changeUserName(userName: string) {
    this.setState({ userName });
  }

  private setState = (newState: Partial<AppState>) => { // setStateをアロー関数に変更
    const currentState = this.stateSource.value;
    this.stateSource.next({ ...currentState, ...newState });
  }

  private getHeaderFromMenu(menu: string): string {
    switch (menu) {
      case 'menu1':
        return 'Menu 1 - Home';
      case 'menu2':
        return 'Menu 2 - Settings';
      default:
        return 'Default Header';
    }
  }

  private getSubMenuFromMenu(menu: string): string {
    switch (menu) {
      case 'menu1':
        return 'Sub Menu 1';
      case 'menu2':
        return 'Sub Menu 2';
      default:
        return '';
    }
  }
}







import { Component, OnInit } from '@angular/core';
import { MenuService } from './menu.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-my-component',
  templateUrl: './my-component.component.html',
  styleUrls: ['./my-component.component.css']
})
export class MyComponent implements OnInit {
  menu: string;
  header: string;
  subMenu: string;
  userName: string;
  private subscriptions: Subscription[] = [];

  constructor(private menuService: MenuService) {}

  ngOnInit(): void {
    this.subscriptions.push(
      this.menuService.state$.subscribe(state => {
        this.menu = state.menu;
        this.header = state.header;
        this.subMenu = state.subMenu;
        this.userName = state.userName;
      })
    );
  }

  ngOnDestroy(): void {
    // メモリリークを防ぐために購読を解除
    this.subscriptions.forEach(sub => sub.unsubscribe());
  }
}







import { Component, OnInit } from '@angular/core';
import { MenuService } from './menu.service';
import { Observable } from 'rxjs';
import { AppState } from './app-state.interface';

@Component({
  selector: 'app-my-component',
  templateUrl: './my-component.component.html',
  styleUrls: ['./my-component.component.css']
})
export class MyComponent implements OnInit {
  state$: Observable<AppState>;

  constructor(private menuService: MenuService) {
    this.state$ = this.menuService.state$;
  }

  ngOnInit(): void {
    // 他の初期化処理があればここに追加
  }
}









<div *ngIf="state$ | async as state">
  <h1>{{ state.header }}</h1>
  <p>Current Menu: {{ state.menu }}</p>
  <p>Sub Menu: {{ state.subMenu }}</p>
  <p>User Name: {{ state.userName }}</p>
</div>

