ディレクトリ構造

css
コードをコピーする
src/
  app/
    data.service.ts
    parent/
      parent.component.ts
      parent.component.html
      parent.component.css
    my-table/
      my-table.component.ts
      my-table.component.html
      my-table.component.css
    another-table/
      another-table.component.ts
      another-table.component.html
      another-table.component.css
    another-data/
      another-data.component.ts
      another-data.component.html
      another-data.component.css
    app.module.ts
1. data.service.tsの拡張
異なる種類のデータセットを管理するために、サービスを拡張します。

typescript
コードをコピーする
// src/app/data.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

export interface UserData {
  id: string;
  name: string;
  progress: string;
  color: string;
}

export interface AnotherData {
  id: number;
  description: string;
  value: number;
}

@Injectable({
  providedIn: 'root'
})
export class DataService {
  // UserDataの管理
  private userDataSubject = new BehaviorSubject<UserData[]>([
    {id: '1', name: 'Hydrogen', progress: 'H', color: '1.0079'},
    {id: '2', name: 'Helium', progress: 'He', color: '4.0026'},
  ]);
  userData$ = this.userDataSubject.asObservable();

  addUserData(newData: UserData) {
    const currentData = this.userDataSubject.value;
    this.userDataSubject.next([...currentData, newData]);
  }

  // AnotherDataの管理
  private anotherDataSubject = new BehaviorSubject<AnotherData[]>([
    {id: 1, description: 'Item 1', value: 10},
    {id: 2, description: 'Item 2', value: 20},
  ]);
  anotherData$ = this.anotherDataSubject.asObservable();

  addAnotherData(newData: AnotherData) {
    const currentData = this.anotherDataSubject.value;
    this.anotherDataSubject.next([...currentData, newData]);
  }
}
2. my-table.component.tsの更新
UserDataを表示・管理するテーブルコンポーネントを更新します。

typescript
コードをコピーする
// src/app/my-table/my-table.component.ts
import { Component, OnInit } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { DataService, UserData } from '../data.service';

@Component({
  selector: 'app-my-table',
  templateUrl: './my-table.component.html',
  styleUrls: ['./my-table.component.css']
})
export class MyTableComponent implements OnInit {
  displayedColumns: string[] = ['id', 'name', 'progress', 'color'];
  dataSource = new MatTableDataSource<UserData>();
  newData: UserData = { id: '', name: '', progress: '', color: '' };

  constructor(private dataService: DataService) {}

  ngOnInit() {
    this.dataService.userData$.subscribe(data => {
      this.dataSource.data = data;
    });
  }

  onSubmit() {
    this.dataService.addUserData(this.newData);
    this.newData = { id: '', name: '', progress: '', color: '' };
  }
}
3. another-data.component.tsの作成
AnotherDataを表示・管理するコンポーネントを新たに作成します。

typescript
コードをコピーする
// src/app/another-data/another-data.component.ts
import { Component, OnInit } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { DataService, AnotherData } from '../data.service';

@Component({
  selector: 'app-another-data',
  templateUrl: './another-data.component.html',
  styleUrls: ['./another-data.component.css']
})
export class AnotherDataComponent implements OnInit {
  displayedColumns: string[] = ['id', 'description', 'value'];
  dataSource = new MatTableDataSource<AnotherData>();
  newData: AnotherData = { id: 0, description: '', value: 0 };

  constructor(private dataService: DataService) {}

  ngOnInit() {
    this.dataService.anotherData$.subscribe(data => {
      this.dataSource.data = data;
    });
  }

  onSubmit() {
    this.dataService.addAnotherData(this.newData);
    this.newData = { id: 0, description: '', value: 0 };
  }
}
4. another-data.component.htmlの作成
html
コードをコピーする
<!-- src/app/another-data/another-data.component.html -->
<form (ngSubmit)="onSubmit()">
  <input placeholder="ID" [(ngModel)]="newData.id" name="id">
  <input placeholder="Description" [(ngModel)]="newData.description" name="description">
  <input placeholder="Value" [(ngModel)]="newData.value" name="value">
  <button type="submit">Add</button>
</form>

<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">
  <ng-container matColumnDef="id">
    <th mat-header-cell *matHeaderCellDef> ID </th>
    <td mat-cell *matCellDef="let element"> {{element.id}} </td>
  </ng-container>

  <ng-container matColumnDef="description">
    <th mat-header-cell *matHeaderCellDef> Description </th>
    <td mat-cell *matCellDef="let element"> {{element.description}} </td>
  </ng-container>

  <ng-container matColumnDef="value">
    <th mat-header-cell *matHeaderCellDef> Value </th>
    <td mat-cell *matCellDef="let element"> {{element.value}} </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
</table>
5. app.module.tsの更新
typescript
コードをコピーする
// src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatTableModule } from '@angular/material/table';

import { AppComponent } from './app.component';
import { MyTableComponent } from './my-table/my-table.component';
import { AnotherTableComponent } from './another-table/another-table.component';
import { AnotherDataComponent } from './another-data/another-data.component';
import { ParentComponent } from './parent/parent.component';

@NgModule({
  declarations: [
    AppComponent,
    MyTableComponent,
    AnotherTableComponent,
    AnotherDataComponent,
    ParentComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    BrowserAnimationsModule,
    MatTableModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
6. parent.component.tsとparent.component.htmlの作成
ParentComponentを作成し、複数のデータセットを表示します。

typescript
コードをコピーする
// src/app/parent/parent.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-parent',
  templateUrl: './parent.component.html',
  styleUrls: ['./parent.component.css']
})
export class ParentComponent {}
html
コードをコピーする
<!-- src/app/parent/parent.component.html -->
<app-my-table></app-my-table>
<app-another-data></app-another-data>
これで、サービスを使用して複数のデータセットを管理し、異なるコンポーネントでデータを表示・操作できるようになります。


3/3








