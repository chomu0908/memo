1. データとインターフェースの定義
src/app/data.ts:

typescript
コードをコピーする
// テーブル1用
export interface PeriodicElement {
  name: string;
  position: number;
  weight: number;
  symbol: string;
}

export const ELEMENT_DATA: PeriodicElement[] = [
  { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },
  { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },
  // 他の初期データ
];

// テーブル2用
export interface AnotherElement {
  id: number;
  description: string;
  quantity: number;
  price: number;
}

export const ANOTHER_DATA: AnotherElement[] = [
  { id: 1, description: 'Item A', quantity: 10, price: 100 },
  { id: 2, description: 'Item B', quantity: 5, price: 200 },
  // 他の初期データ
];
2. コンポーネントの作成
src/app/app.component.ts:

typescript
コードをコピーする
import { Component } from '@angular/core';
import { PeriodicElement, ELEMENT_DATA, AnotherElement, ANOTHER_DATA } from './data';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  // テーブル1
  displayedColumns1: string[] = ['position', 'name', 'weight', 'symbol', 'actions'];
  dataSource1: PeriodicElement[] = ELEMENT_DATA;
  newElement1: PeriodicElement = { position: 0, name: '', weight: 0, symbol: '' };

  // テーブル2
  displayedColumns2: string[] = ['id', 'description', 'quantity', 'price', 'actions'];
  dataSource2: AnotherElement[] = ANOTHER_DATA;
  newElement2: AnotherElement = { id: 0, description: '', quantity: 0, price: 0 };

  // テーブル1の要素を追加するメソッド
  addElement1() {
    this.dataSource1.push({ ...this.newElement1 });
    this.dataSource1 = [...this.dataSource1]; // テーブルをリフレッシュするために必要
    this.newElement1 = { position: 0, name: '', weight: 0, symbol: '' }; // フォームをリセット
  }

  // テーブル2の要素を追加するメソッド
  addElement2() {
    this.dataSource2.push({ ...this.newElement2 });
    this.dataSource2 = [...this.dataSource2]; // テーブルをリフレッシュするために必要
    this.newElement2 = { id: 0, description: '', quantity: 0, price: 0 }; // フォームをリセット
  }

  // テーブル1の要素を削除するメソッド
  deleteElement1(position: number) {
    this.dataSource1 = this.dataSource1.filter(element => element.position !== position);
  }

  // テーブル2の要素を削除するメソッド
  deleteElement2(id: number) {
    this.dataSource2 = this.dataSource2.filter(element => element.id !== id);
  }
}
3. HTMLテンプレートの作成
src/app/app.component.html:

html
コードをコピーする
<div style="margin: 20px;">
  <h1>Table 1</h1>
  <table mat-table [dataSource]="dataSource1" class="mat-elevation-z8">

    <!-- Position Column -->
    <ng-container matColumnDef="position">
      <th mat-header-cell *matHeaderCellDef> No. </th>
      <td mat-cell *matCellDef="let element"> {{element.position}} </td>
    </ng-container>

    <!-- Name Column -->
    <ng-container matColumnDef="name">
      <th mat-header-cell *matHeaderCellDef> Name </th>
      <td mat-cell *matCellDef="let element"> {{element.name}} </td>
    </ng-container>

    <!-- Weight Column -->
    <ng-container matColumnDef="weight">
      <th mat-header-cell *matHeaderCellDef> Weight </th>
      <td mat-cell *matCellDef="let element"> {{element.weight}} </td>
    </ng-container>

    <!-- Symbol Column -->
    <ng-container matColumnDef="symbol">
      <th mat-header-cell *matHeaderCellDef> Symbol </th>
      <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>
    </ng-container>

    <!-- Actions Column -->
    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef> Actions </th>
      <td mat-cell *matCellDef="let element">
        <button mat-raised-button color="warn" (click)="deleteElement1(element.position)">Delete</button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns1"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns1;"></tr>
  </table>

  <div style="margin-top: 20px;">
    <mat-form-field appearance="fill">
      <mat-label>Position</mat-label>
      <input matInput [(ngModel)]="newElement1.position">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Name</mat-label>
      <input matInput [(ngModel)]="newElement1.name">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Weight</mat-label>
      <input matInput [(ngModel)]="newElement1.weight">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Symbol</mat-label>
      <input matInput [(ngModel)]="newElement1.symbol">
    </mat-form-field>

    <button mat-raised-button color="primary" (click)="addElement1()">Add Element</button>
  </div>
</div>

<div style="margin: 20px;">
  <h1>Table 2</h1>
  <table mat-table [dataSource]="dataSource2" class="mat-elevation-z8">

    <!-- ID Column -->
    <ng-container matColumnDef="id">
      <th mat-header-cell *matHeaderCellDef> ID </th>
      <td mat-cell *matCellDef="let element"> {{element.id}} </td>
    </ng-container>

    <!-- Description Column -->
    <ng-container matColumnDef="description">
      <th mat-header-cell *matHeaderCellDef> Description </th>
      <td mat-cell *matCellDef="let element"> {{element.description}} </td>
    </ng-container>

    <!-- Quantity Column -->
    <ng-container matColumnDef="quantity">
      <th mat-header-cell *matHeaderCellDef> Quantity </th>
      <td mat-cell *matCellDef="let element"> {{element.quantity}} </td>
    </ng-container>

    <!-- Price Column -->
    <ng-container matColumnDef="price">
      <th mat-header-cell *matHeaderCellDef> Price </th>
      <td mat-cell *matCellDef="let element"> {{element.price}} </td>
    </ng-container>

    <!-- Actions Column -->
    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef> Actions </th>
      <td mat-cell *matCellDef="let element">
        <button mat-raised-button color="warn" (click)="deleteElement2(element.id)">Delete</button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns2"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns2;"></tr>
  </table>

  <div style="margin-top: 20px;">
    <mat-form-field appearance="fill">
      <mat-label>ID</mat-label>
      <input matInput [(ngModel)]="newElement2.id">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Description</mat-label>
      <input matInput [(ngModel)]="newElement2.description">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Quantity</mat-label>
      <input matInput [(ngModel)]="newElement2.quantity">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Price</mat-label>
      <input matInput [(ngModel)]="newElement2.price">
    </mat-form-field>

    <button mat-raised-button color="primary" (click)="addElement2()">Add Item</button>
  </div>
</div>
4. 必要なモジュールのインポート
src/app/app.module.ts:

typescript
コードをコピーする
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatTable




newElement1.position
みたいな書き方でmewElement1の要素に入るってこと？
ChatGPT
はい、その通りです。newElement1.position のような書き方をすることで、newElement1 オブジェクトの position プロパティにアクセスし、値を設定または取得することができます。Angularの双方向データバインディング ([(ngModel)]) を使うことで、フォームの入力欄とコンポーネントのプロパティを連携させることができます。

具体的には、以下のコードで示しています。

1. テンプレートコード
src/app/app.component.html:

html
コードをコピーする
<div style="margin: 20px;">
  <h1>Table 1</h1>
  <table mat-table [dataSource]="dataSource1" class="mat-elevation-z8">

    <!-- Position Column -->
    <ng-container matColumnDef="position">
      <th mat-header-cell *matHeaderCellDef> No. </th>
      <td mat-cell *matCellDef="let element"> {{element.position}} </td>
    </ng-container>

    <!-- Name Column -->
    <ng-container matColumnDef="name">
      <th mat-header-cell *matHeaderCellDef> Name </th>
      <td mat-cell *matCellDef="let element"> {{element.name}} </td>
    </ng-container>

    <!-- Weight Column -->
    <ng-container matColumnDef="weight">
      <th mat-header-cell *matHeaderCellDef> Weight </th>
      <td mat-cell *matCellDef="let element"> {{element.weight}} </td>
    </ng-container>

    <!-- Symbol Column -->
    <ng-container matColumnDef="symbol">
      <th mat-header-cell *matHeaderCellDef> Symbol </th>
      <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>
    </ng-container>

    <!-- Actions Column -->
    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef> Actions </th>
      <td mat-cell *matCellDef="let element">
        <button mat-raised-button color="warn" (click)="deleteElement1(element.position)">Delete</button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns1"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns1;"></tr>
  </table>

  <div style="margin-top: 20px;">
    <mat-form-field appearance="fill">
      <mat-label>Position</mat-label>
      <input matInput [(ngModel)]="newElement1.position">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Name</mat-label>
      <input matInput [(ngModel)]="newElement1.name">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Weight</mat-label>
      <input matInput [(ngModel)]="newElement1.weight">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Symbol</mat-label>
      <input matInput [(ngModel)]="newElement1.symbol">
    </mat-form-field>

    <button mat-raised-button color="primary" (click)="addElement1()">Add Element</button>
  </div>
</div>
2. コンポーネントコード
src/app/app.component.ts:

typescript
コードをコピーする
import { Component } from '@angular/core';
import { PeriodicElement, ELEMENT_DATA, AnotherElement, ANOTHER_DATA } from './data';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  // テーブル1
  displayedColumns1: string[] = ['position', 'name', 'weight', 'symbol', 'actions'];
  dataSource1: PeriodicElement[] = ELEMENT_DATA;
  newElement1: PeriodicElement = { position: 0, name: '', weight: 0, symbol: '' };

  // テーブル2
  displayedColumns2: string[] = ['id', 'description', 'quantity', 'price', 'actions'];
  dataSource2: AnotherElement[] = ANOTHER_DATA;
  newElement2: AnotherElement = { id: 0, description: '', quantity: 0, price: 0 };

  // テーブル1の要素を追加するメソッド
  addElement1() {
    this.dataSource1.push({ ...this.newElement1 });
    this.dataSource1 = [...this.dataSource1]; // テーブルをリフレッシュするために必要
    this.newElement1 = { position: 0, name: '', weight: 0, symbol: '' }; // フォームをリセット
  }

  // テーブル2の要素を追加するメソッド
  addElement2() {
    this.dataSource2.push({ ...this.newElement2 });
    this.dataSource2 = [...this.dataSource2]; // テーブルをリフレッシュするために必要
    this.newElement2 = { id: 0, description: '', quantity: 0, price: 0 }; // フォームをリセット
  }

  // テーブル1の要素を削除するメソッド
  deleteElement1(position: number) {
    this.dataSource1 = this.dataSource1.filter(element => element.position !== position);
  }

  // テーブル2の要素を削除するメソッド
  deleteElement2(id: number) {
    this.dataSource2 = this.dataSource2.filter(element => element.id !== id);
  }
}
3. モジュールのインポート
src/app/app.module.ts:

typescript
コードをコピーする
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatTableModule } from '@angular/material/table';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    BrowserAnimationsModule,
    FormsModule,
    MatTableModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
これで、newElement1 の各プロパティ（position、name、weight、symbol）に対して入力欄が対応しており、それらの入力値が newElement1 オブジェクトに反映されます。addElement1 メソッドを呼び出すと、newElement1 の値が dataSource1 に追加され、テーブルが更新されます。同様に、newElement2 についても対応しています。







