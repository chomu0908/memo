承知しました。parentFormGroupを不要にし、optionControlのフォームコントロールネームを引数として取得するように修正したコードを以下に示します。

HTML Template
html
コードをコピーする
<form [formGroup]="myForm">
  <label for="options">Options</label>
  <select formControlName="option" id="options">
    <option *ngFor="let opt of options" [value]="opt">{{ opt }}</option>
  </select>

  <label for="otherInput">Other</label>
  <input type="text" formControlName="other" id="otherInput" appEnableOnOther="option" />
</form>
Component
typescript
コードをコピーする
import { Component } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  myForm: FormGroup;
  options = ['Option 1', 'Option 2', 'Other'];

  constructor(private fb: FormBuilder) {
    this.myForm = this.fb.group({
      option: [''],
      other: [{ value: '', disabled: true }]
    });
  }
}
Directive
typescript
コードをコピーする
import { Directive, Input, OnInit } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { NgControl, FormGroupDirective } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(private ngControl: NgControl, private formGroupDirective: FormGroupDirective) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(value => {
      if (value === 'Other') {
        otherControl?.enable();
      } else {
        otherControl?.reset();
        otherControl?.disable();
      }
    });

    // 初期状態の設定
    if (optionControl?.value !== 'Other') {
      otherControl?.disable();
    }
  }
}
この修正では、appEnableOnOtherディレクティブの引数としてoptionControlNameを受け取り、対応するフォームコントロールの名前を指定することができます。また、FormGroupDirectiveを使用して親のフォームグループを取得しています。これにより、parentFormGroupを渡す必要がなくなります。






今のところ、この会話は役に立ちましたか？





import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(value => {
      if (value === 'Other') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(value);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    if (optionControl?.value !== 'Other') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}


import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(value => {
      const selectedOption = (optionControl as any).value;
      const selectElement = this.el.nativeElement.previousElementSibling;
      const selectedOptionText = selectElement.options[selectElement.selectedIndex].text;

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(selectedOption);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = this.el.nativeElement.previousElementSibling.options[this.el.nativeElement.previousElementSibling.selectedIndex].text;
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}


import { Directive, Input, OnInit, AfterViewInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit, AfterViewInit {
  @Input('appEnableOnOther') optionControlName!: string;

  private selectElement: HTMLSelectElement;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    this.selectElement = this.el.nativeElement.previousElementSibling;
  }

  ngAfterViewInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(() => {
      const selectedOptionText = this.selectElement.options[this.selectElement.selectedIndex]?.text;

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(selectedOptionText);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = this.selectElement.options[this.selectElement.selectedIndex]?.text;
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(initialSelectedOptionText);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}

import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;
    const selectElement = this.el.nativeElement.closest('form').querySelector(`[formControlName="${this.optionControlName}"]`);

    optionControl?.valueChanges.subscribe(() => {
      const selectedOptionText = selectElement.options[selectElement.selectedIndex]?.text;

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(selectedOptionText);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = selectElement.options[selectElement.selectedIndex]?.text;
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}


import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(value => {
      const selectedOption = (optionControl as any).value;
      const selectElement = this.el.nativeElement.closest('form').querySelector('mat-select');
      const selectedOptionText = selectElement?.textContent.trim();

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(selectedOption);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = this.el.nativeElement.closest('form').querySelector('mat-select')?.textContent.trim();
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}



import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';
import { AppComponent } from './app.component';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef,
    private appComponent: AppComponent // AppComponentのインスタンスを注入
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(() => {
      const selectedOptionText = this.appComponent.selectedOptionDisplay; // selectedOptionDisplayを使用

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(optionControl?.value);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = this.appComponent.selectedOptionDisplay; // selectedOptionDisplayを使用
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}




import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    // Use a setTimeout to ensure the latest value is captured
    optionControl?.valueChanges.subscribe(() => {
      setTimeout(() => {
        const selectElement = this.el.nativeElement.closest('form').querySelector('mat-select');
        const selectedOptionText = (selectElement as HTMLMatSelectElement)?.querySelector('mat-option.mat-selected')?.textContent?.trim();

        if (selectedOptionText === 'その他') {
          otherControl?.reset();
          otherControl?.enable();
          this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
        } else {
          otherControl?.setValue(optionControl?.value);
          otherControl?.disable();
          this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
        }
      });
    });

    // 初期状態の設定
    setTimeout(() => {
      const selectElement = this.el.nativeElement.closest('form').querySelector('mat-select');
      const initialSelectedOptionText = (selectElement as HTMLMatSelectElement)?.querySelector('mat-option.mat-selected')?.textContent?.trim();
      
      if (initialSelectedOptionText !== 'その他') {
        otherControl?.setValue(optionControl?.value);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });
  }
}




import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';
import { MatSelect } from '@angular/material/select';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    const selectElement = this.el.nativeElement.closest('form').querySelector('mat-select') as MatSelect;

    optionControl?.valueChanges.subscribe(() => {
      const selectedOptionText = selectElement.options.find(opt => opt.value === optionControl.value)?.viewValue;

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(optionControl?.value);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = selectElement.options.find(opt => opt.value === optionControl?.value)?.viewValue;
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}







import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    // Helper function to find the corresponding mat-select by form control name
    const findMatSelect = (): HTMLMatSelectElement | null => {
      const formField = this.el.nativeElement.closest('mat-form-field');
      const selectElement = formField?.previousElementSibling as HTMLMatSelectElement;
      return selectElement;
    };

    optionControl?.valueChanges.subscribe(() => {
      setTimeout(() => {
        const selectElement = findMatSelect();
        const selectedOptionText = selectElement?.querySelector('mat-option.mat-selected')?.textContent?.trim();

        if (selectedOptionText === 'その他') {
          otherControl?.reset();
          otherControl?.enable();
          this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
        } else {
          otherControl?.setValue(selectElement?.value || '');
          otherControl?.disable();
          this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
        }
      });
    });

    // Initial state setup
    setTimeout(() => {
      const selectElement = findMatSelect();
      const initialSelectedOptionText = selectElement?.querySelector('mat-option.mat-selected')?.textContent?.trim();
      
      if (initialSelectedOptionText !== 'その他') {
        otherControl?.setValue(selectElement?.value || '');
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });
  }
}




import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(() => {
      setTimeout(() => {
        const formField = this.el.nativeElement.closest('form').querySelector(`[formControlName="${this.optionControlName}"]`).closest('mat-form-field');
        const selectElement = formField.querySelector('mat-select');
        const selectedOptionText = selectElement.querySelector('mat-option.mat-selected')?.textContent?.trim();

        if (selectedOptionText === 'その他') {
          otherControl?.reset();
          otherControl?.enable();
          this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
        } else {
          otherControl?.setValue(optionControl?.value);
          otherControl?.disable();
          this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
        }
      });
    });

    // 初期状態の設定
    setTimeout(() => {
      const formField = this.el.nativeElement.closest('form').querySelector(`[formControlName="${this.optionControlName}"]`).closest('mat-form-field');
      const selectElement = formField.querySelector('mat-select');
      const initialSelectedOptionText = selectElement.querySelector('mat-option.mat-selected')?.textContent?.trim();

      if (initialSelectedOptionText !== 'その他') {
        otherControl?.setValue(optionControl?.value);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });
  }
}




実際にデータベースを移行するときには、次のような手順でカスタム関数を使ってデコード値をコード値に変換します。

1. 対象テーブルのバックアップを取得する
データベース移行作業を行う前に、必ずデータベースのバックアップを取得してください。

2. カスタム関数の作成
まず、PostgreSQLにカスタム関数を作成します。例として以下のようなカスタム関数を使用します。

sql
コードをコピーする
CREATE OR REPLACE FUNCTION convert_decode_to_code(input_decode_value VARCHAR, other_code_value VARCHAR)
RETURNS VARCHAR AS $$
DECLARE
    result_code_value VARCHAR;
BEGIN
    -- デコード値とコード値の対応をハードコード
    CASE input_decode_value
        WHEN 'デコード値1' THEN result_code_value := 'コード値1';
        WHEN 'デコード値2' THEN result_code_value := 'コード値2';
        -- 必要に応じてさらに対応を追加
        ELSE result_code_value := other_code_value; -- 対応が見つからない場合はその他のコード値
    END CASE;

    RETURN result_code_value;
END;
$$ LANGUAGE plpgsql;
3. 移行用のテーブルの作成
移行後のテーブルを新しい構造で作成します。

sql
コードをコピーする
CREATE TABLE new_example_table (
    id SERIAL PRIMARY KEY,
    decode_value VARCHAR,
    code_value VARCHAR
);
4. デコード値の変換とデータの挿入
古いテーブルから新しいテーブルにデータを移行する際に、カスタム関数を使ってデコード値をコード値に変換しながらデータを挿入します。

sql
コードをコピーする
INSERT INTO new_example_table (id, decode_value, code_value)
SELECT id, decode_value, convert_decode_to_code(decode_value, 'OTHER')
FROM example_table;
5. 移行が完了したことを確認
データが新しいテーブルに正しく移行され、デコード値が正しいコード値に変換されたことを確認します。

6. 古いテーブルの削除（オプション）
すべてが正しく移行されたことを確認した後、古いテーブルを削除することができます。ただし、データのバックアップがあることを再確認してください。

sql
コードをコピーする
DROP TABLE example_table;
まとめ
上記の手順を通じて、カスタム関数を使用してデコード値をコード値に変換しながらデータを新しいテーブルに移行することができます。移行の際には、データの整合性と安全性を確保するために十分なテストを行いましょう。







CREATE OR REPLACE FUNCTION convert_decode_to_code(input_decode_value VARCHAR, other_code_value VARCHAR)
RETURNS VARCHAR AS $$
DECLARE
    result_code_value VARCHAR;
BEGIN
    IF input_decode_value IS NULL THEN
        RETURN NULL;
    END IF;

    -- デコード値とコード値の対応をハードコード
    CASE input_decode_value
        WHEN 'デコード値1' THEN result_code_value := 'コード値1';
        WHEN 'デコード値2' THEN result_code_value := 'コード値2';
        -- 必要に応じてさらに対応を追加
        ELSE result_code_value := other_code_value; -- 対応が見つからない場合はその他のコード値
    END CASE;

    RETURN result_code_value;
END;
$$ LANGUAGE plpgsql;

