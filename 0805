承知しました。parentFormGroupを不要にし、optionControlのフォームコントロールネームを引数として取得するように修正したコードを以下に示します。

HTML Template
html
コードをコピーする
<form [formGroup]="myForm">
  <label for="options">Options</label>
  <select formControlName="option" id="options">
    <option *ngFor="let opt of options" [value]="opt">{{ opt }}</option>
  </select>

  <label for="otherInput">Other</label>
  <input type="text" formControlName="other" id="otherInput" appEnableOnOther="option" />
</form>
Component
typescript
コードをコピーする
import { Component } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  myForm: FormGroup;
  options = ['Option 1', 'Option 2', 'Other'];

  constructor(private fb: FormBuilder) {
    this.myForm = this.fb.group({
      option: [''],
      other: [{ value: '', disabled: true }]
    });
  }
}
Directive
typescript
コードをコピーする
import { Directive, Input, OnInit } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { NgControl, FormGroupDirective } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(private ngControl: NgControl, private formGroupDirective: FormGroupDirective) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(value => {
      if (value === 'Other') {
        otherControl?.enable();
      } else {
        otherControl?.reset();
        otherControl?.disable();
      }
    });

    // 初期状態の設定
    if (optionControl?.value !== 'Other') {
      otherControl?.disable();
    }
  }
}
この修正では、appEnableOnOtherディレクティブの引数としてoptionControlNameを受け取り、対応するフォームコントロールの名前を指定することができます。また、FormGroupDirectiveを使用して親のフォームグループを取得しています。これにより、parentFormGroupを渡す必要がなくなります。






今のところ、この会話は役に立ちましたか？





import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(value => {
      if (value === 'Other') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(value);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    if (optionControl?.value !== 'Other') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}


import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(value => {
      const selectedOption = (optionControl as any).value;
      const selectElement = this.el.nativeElement.previousElementSibling;
      const selectedOptionText = selectElement.options[selectElement.selectedIndex].text;

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(selectedOption);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = this.el.nativeElement.previousElementSibling.options[this.el.nativeElement.previousElementSibling.selectedIndex].text;
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}


import { Directive, Input, OnInit, AfterViewInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit, AfterViewInit {
  @Input('appEnableOnOther') optionControlName!: string;

  private selectElement: HTMLSelectElement;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    this.selectElement = this.el.nativeElement.previousElementSibling;
  }

  ngAfterViewInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(() => {
      const selectedOptionText = this.selectElement.options[this.selectElement.selectedIndex]?.text;

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(selectedOptionText);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = this.selectElement.options[this.selectElement.selectedIndex]?.text;
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(initialSelectedOptionText);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}

import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;
    const selectElement = this.el.nativeElement.closest('form').querySelector(`[formControlName="${this.optionControlName}"]`);

    optionControl?.valueChanges.subscribe(() => {
      const selectedOptionText = selectElement.options[selectElement.selectedIndex]?.text;

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(selectedOptionText);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = selectElement.options[selectElement.selectedIndex]?.text;
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}


import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(value => {
      const selectedOption = (optionControl as any).value;
      const selectElement = this.el.nativeElement.closest('form').querySelector('mat-select');
      const selectedOptionText = selectElement?.textContent.trim();

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(selectedOption);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = this.el.nativeElement.closest('form').querySelector('mat-select')?.textContent.trim();
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}



import { Directive, Input, OnInit, Renderer2, ElementRef } from '@angular/core';
import { FormGroupDirective, NgControl } from '@angular/forms';
import { AppComponent } from './app.component';

@Directive({
  selector: '[appEnableOnOther]'
})
export class EnableOnOtherDirective implements OnInit {
  @Input('appEnableOnOther') optionControlName!: string;

  constructor(
    private ngControl: NgControl,
    private formGroupDirective: FormGroupDirective,
    private renderer: Renderer2,
    private el: ElementRef,
    private appComponent: AppComponent // AppComponentのインスタンスを注入
  ) {}

  ngOnInit() {
    const parentFormGroup = this.formGroupDirective.form;
    const optionControl = parentFormGroup.get(this.optionControlName);
    const otherControl = this.ngControl.control;

    optionControl?.valueChanges.subscribe(() => {
      const selectedOptionText = this.appComponent.selectedOptionDisplay; // selectedOptionDisplayを使用

      if (selectedOptionText === 'その他') {
        otherControl?.reset();
        otherControl?.enable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'initial');
      } else {
        otherControl?.setValue(optionControl?.value);
        otherControl?.disable();
        this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
      }
    });

    // 初期状態の設定
    const initialSelectedOptionText = this.appComponent.selectedOptionDisplay; // selectedOptionDisplayを使用
    if (initialSelectedOptionText !== 'その他') {
      otherControl?.setValue(optionControl?.value);
      otherControl?.disable();
      this.renderer.setStyle(this.el.nativeElement, 'color', 'transparent');
    }
  }
}
