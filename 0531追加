データを管理するためにサービスを使用する場合、データの操作はサービスに移行し、コンポーネントはサービスを介してデータを取得および更新します。以下は、そのような実装例です。

データサービスの作成
まず、データサービスを作成します。

1. data.service.ts
typescript
コードをコピーする
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

export interface User {
  id: number;
  name: string;
}

@Injectable({
  providedIn: 'root'
})
export class DataService {
  private usersSource = new BehaviorSubject<User[]>([
    { id: 1, name: '太郎' },
    { id: 2, name: '次郎' },
    { id: 3, name: '三郎' },
  ]);

  users$ = this.usersSource.asObservable();

  private getUsers(): User[] {
    return this.usersSource.getValue();
  }

  updateUser(updatedUser: User): void {
    const users = this.getUsers().map(user => user.id === updatedUser.id ? updatedUser : user);
    this.usersSource.next(users);
  }

  addUser(newUser: User): void {
    const users = this.getUsers();
    users.push(newUser);
    this.usersSource.next(users);
  }
}
コンポーネントの更新
次に、コンポーネントでデータサービスを利用するように更新します。

2. app.component.ts
typescript
コードをコピーする
import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { NameDialogComponent } from './name-dialog/name-dialog.component';
import { DataService, User } from './data.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  displayedColumns: string[] = ['id', 'name', 'actions'];
  dataSource$: Observable<User[]>;

  constructor(public dialog: MatDialog, private dataService: DataService) {
    this.dataSource$ = this.dataService.users$;
  }

  ngOnInit(): void {}

  openDialog(user: User): void {
    const dialogRef = this.dialog.open(NameDialogComponent, {
      width: '250px',
      data: { name: user.name, isEdit: true }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.dataService.updateUser({ ...user, name: result.name });
      }
    });
  }

  openAddDialog(): void {
    const dialogRef = this.dialog.open(NameDialogComponent, {
      width: '250px',
      data: { name: '', isEdit: false }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        const newId = this.dataService.getUsers().length > 0 ? Math.max(...this.dataService.getUsers().map(user => user.id)) + 1 : 1;
        const newUser: User = { id: newId, name: result.name };
        this.dataService.addUser(newUser);
      }
    });
  }
}
3. app.component.html
html
コードをコピーする
<div>
  <h1>ユーザーリスト</h1>
  <button mat-button (click)="openAddDialog()">ユーザーを追加</button>
  <table mat-table [dataSource]="dataSource$ | async" class="mat-elevation-z8">

    <!-- ID列 -->
    <ng-container matColumnDef="id">
      <th mat-header-cell *matHeaderCellDef>ID</th>
      <td mat-cell *matCellDef="let element">{{element.id}}</td>
    </ng-container>

    <!-- 名前列 -->
    <ng-container matColumnDef="name">
      <th mat-header-cell *matHeaderCellDef>名前</th>
      <td mat-cell *matCellDef="let element">{{element.name}}</td>
    </ng-container>

    <!-- アクション列 -->
    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef>アクション</th>
      <td mat-cell *matCellDef="let element">
        <button mat-button (click)="openDialog(element)">編集</button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>
</div>
4. name-dialog.component.ts
既に正しいので変更はありません。

5. name-dialog.component.html
既に正しいので変更はありません。

修正点の要約
サービス層の導入: データ管理を DataService で行い、BehaviorSubject を使ってリアクティブにデータを管理します。
コンポーネントの依存: コンポーネントでサービスを利用し、データの取得や更新をサービス経由で行います。
非同期データソース: dataSource を Observable にし、テンプレートで async パイプを使用してデータを表示します。
これにより、データの追加と編集がサービス層で管理され、コンポーネントがシンプルになります。








